name: Run terraform on account repo
on:
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_REGION:
        required: true
      TF_BACKEND_S3_BUCKET:
        required: true
      TF_BACKEND_S3_KEY:
        required: true
      TF_BACKEND_S3_REGION:
        required: true

jobs:
  terraform:
    name: 'Run terraform'
    runs-on: ubuntu-latest
    # Needed to interact with Github's OIDC token
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4

      - name: Terraform Format
        id: fmt
        uses: dflook/terraform-fmt-check@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.sha }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init -no-color \
            -backend-config="bucket=${{ secrets.TF_BACKEND_S3_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_S3_KEY }}" \
            -backend-config="region=${{ secrets.TF_BACKEND_S3_REGION }}"

      - name: Terraform Validate
        id: validate
        uses: dflook/terraform-validate@v1

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Add Plan to Job Summary
        run: |
          {
            echo '# Terraform Plan'
            echo '```'
            echo "$PLAN"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"

      - name: Create Pull Request Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const MAX_PLAN_LENGTH = 60000 // Max comment length is 65536
            const plan = '```\n' + process.env.PLAN + '\n```'

            const workflowSummaryURL = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'

            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show <a href="${workflowSummaryURL}">Plan</a></summary>

            ${plan.length <= MAX_PLAN_LENGTH ? plan : `_The plan is too large to include in a comment, open the [workflow summary](${workflowSummaryURL}) to view it._`}
            </details>

            **Pusher**: @${{ github.actor }}, **Action**: \`${{ github.event_name }}\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: terraform apply -auto-approve
