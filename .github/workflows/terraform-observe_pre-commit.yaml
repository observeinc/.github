name: Pre-Commit

on:
  workflow_call:
    inputs:
      tflint-version:
        required: false
        type: string
        default: v0.45.0
        
    secrets:
      TERRAFORM_MODULES_ROLE_ARN:
        required: true
      TERRAFORM_MODULES_REGION:
        required: true

jobs:
  # Min Terraform version(s)
  getDirectories:
    name: Get root directories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
      - name: Build matrix
        id: matrix
        run: |
          DIRS=$(python -c "import json; import glob; print(json.dumps([x.replace('/versions.tf', '') for x in glob.glob('./**/versions.tf', recursive=True)]))")
          echo "directories=$DIRS" >> "$GITHUB_OUTPUT"
    outputs:
      directories: ${{ steps.matrix.outputs.directories }}

  preCommitMinVersions:
    name: Min TF validate
    needs: getDirectories
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        directory: ${{ fromJson(needs.getDirectories.outputs.directories) }}
    env:
      # This is a temporary workaround for `customer` being required by Observe provider
      # Validating submodules will fail without this (https://github.com/gruntwork-io/pre-commit/issues/42)
      OBSERVE_CUSTOMER: 0
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_MODULES_ROLE_ARN }}
          aws-region: ${{ secrets.TERRAFORM_MODULES_REGION }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@v1.2.6
        with:
          directory: ${{ matrix.directory }}
      - name: Install Terraform v${{ steps.minMax.outputs.minVersion }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.minMax.outputs.minVersion }}
      - name: Install pre-commit dependencies
        run: pip install pre-commit
      - name: Execute pre-commit
        # Run only validate pre-commit check on min version supported
        if: ${{ matrix.directory !=  '.' }}
        run: pre-commit run terraform_validate --color=always --show-diff-on-failure --files ${{ matrix.directory }}/*
      - name: Execute pre-commit
        # Run only validate pre-commit check on min version supported
        if: ${{ matrix.directory ==  '.' }}
        run: pre-commit run terraform_validate --color=always --show-diff-on-failure --files $(ls *.tf)

  # Max Terraform version
  getBaseVersion:
    name: Module max TF version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@v1.2.6
    outputs:
      minVersion: ${{ steps.minMax.outputs.minVersion }}
      maxVersion: ${{ steps.minMax.outputs.maxVersion }}

  preCommitMaxVersion:
    name: Max TF pre-commit
    runs-on: ubuntu-latest
    needs: getBaseVersion
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - ${{ needs.getBaseVersion.outputs.maxVersion }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_MODULES_ROLE_ARN }}
          aws-region: ${{ secrets.TERRAFORM_MODULES_REGION }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
      - name: Install Terraform v${{ matrix.version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.version }}
      - name: Install pre-commit dependencies
        run: |
          pip install pre-commit
          curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz && tar -xzf terraform-docs.tar.gz terraform-docs && chmod +x terraform-docs && sudo mv terraform-docs /usr/bin/
      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          tflint_version: ${{ inputs.tflint-version }}
      - name: Execute pre-commit
        # Run all pre-commit checks on max version supported
        if: ${{ matrix.version ==  needs.getBaseVersion.outputs.maxVersion }}
        run: pre-commit run --color=always --show-diff-on-failure --all-files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
