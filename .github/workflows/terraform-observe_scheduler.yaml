name: Terraform-Observe Test Scheduler

on:
  workflow_call:
    inputs:
      skip:
        required: false
        type: string
        description: 'example: {"jobs": ["validate-pr-title", "single-commit"]}'
      terraform-version:
        description: "Terraform version"
        required: false
        type: string
        default: "latest"
      script_branch:
        description: "Branch of python script"
        required: false
        type: string
        default: "main"

jobs:
  commit-validation:
    uses: ./.github/workflows/shared_commit-validation.yaml
    secrets: inherit
    with:
      skip: ${{ inputs.skip }}

  get-test-directories:
    if: "!contains(fromJSON(inputs.skip).jobs, 'terraform-tests')"
    name: Get Terraform Test Directories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: download python script
        id: matrix
        run: |
          curl -O https://raw.githubusercontent.com/observeinc/.github/${{ inputs.script_branch }}/.github/scripts/main.py
          # script creates output directories_with_customerID
          python3 main.py
        env:
          TERRAFORM_MODULES_TEST_OBSERVE_CUSTOMER_LIST: ${{ vars.TERRAFORM_MODULES_TEST_OBSERVE_CUSTOMER_LIST }}

    outputs:
      directories_with_customerID: ${{ steps.matrix.outputs.directories_with_customerID }}

  terraform-test-apply:
    needs: get-test-directories
    if: ${{ needs.get-test-directories.outputs.directories_with_customerID != '' }}
    name: Test Terraform Module
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        directories_with_customerID: ${{ fromJson(needs.get-test-directories.outputs.directories_with_customerID) }}
    steps:
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - uses: actions/checkout@v4

      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: split ${{ matrix.directories_with_customerID }}
        id: matrix
        run: |
          curl -O https://raw.githubusercontent.com/observeinc/.github/${{ inputs.script_branch }}/.github/scripts/main.py
       
          python3 -c 'from main import split_string_into_dir_and_customer; split_string_into_dir_and_customer("${{ matrix.directories_with_customerID }}");'
      
      - name: make test
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: make test "${{ env.TEST_DIR }}"
        env:
          OBSERVE_CUSTOMER: ${{ env.CUST_NUMBER }}
          OBSERVE_DOMAIN: ${{ secrets.TERRAFORM_MODULES_TEST_OBSERVE_DOMAIN }}
          OBSERVE_USER_EMAIL: ${{ secrets.TERRAFORM_MODULES_TEST_OBSERVE_USER_EMAIL }}
          OBSERVE_USER_PASSWORD: ${{ secrets.TERRAFORM_MODULES_TEST_OBSERVE_USER_PASSWORD }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Validate App Icon URL is internal
  validate-app-icon:
    name: Validate App Icon
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Check manifest.yaml exists
        id: check_manifest
        uses: andstor/file-existence-action@v3
        with:
          files: "manifest.yaml"
      - name: Get App Icon URL
        id: get_icon_url
        uses: mikefarah/yq@v4.44.3
        if: steps.check_manifest.outputs.files_exists == 'true'
        with:
          cmd: yq 'with_entries(.key |= downcase).iconurl' manifest.yaml
      - name: Validate App Icon URL Is Internal
        if: ${{ !startsWith(steps.get_icon_url.outputs.result, 'https://assets.observeinc.com/') && steps.check_manifest.outputs.files_exists == 'true' }}
        run: echo "::error file=manifest.yaml,title=Invalid App Icon URL::App icon URLs must live in the 'assets.observeinc.com' domain" && exit 1
      - name: Validate App Icon URL Is Working
        uses: filiph/linkcheck@3.0.0
        if: steps.check_manifest.outputs.files_exists == 'true'
        with:
          arguments: ${{ steps.get_icon_url.outputs.result }}
